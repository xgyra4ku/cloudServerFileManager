document.addEventListener("DOMContentLoaded", () => {
    const fileList = document.getElementById("file-list");
    const uploadForm = document.getElementById("upload-form");
    const currentPathDisplay = document.getElementById("current-path");
    const createFolderForm = document.getElementById("create-folder-form");

    let currentPath = '~'; // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    const fetchFiles = async (path = '') => {
        try {
            currentPath = path; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
            const response = await fetch(`/list-files?path=${encodeURIComponent(path)}`);
            const data = await response.json();

            if (response.ok) {
                currentPathDisplay.innerHTML = `<span class ="current-path" id="current-path">Current Path: ${path || "~"}</span>`;

                // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫—É Back (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö)
                const backButtonHTML = path !== '~' ? `<button id="back-button">Back</button>` : '';

                // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
                const folders = data.filter(file => file.is_dir).sort((a, b) => a.name.localeCompare(b.name));
                const files = data.filter(file => !file.is_dir).sort((a, b) => a.name.localeCompare(b.name));

                // –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
                fileList.innerHTML = `
                    ${backButtonHTML}
                    <div>
                        ${folders.map(file => {
                            const newPath = path ? `${path}/${file.name}` : file.name;
                            //return `<li>üìÇ <a href="#" class="folder-link" data-path="${newPath}">${file.name}</a></li>`;
                           return `<div class="folder-item">
                               <span class="folder-name">üìÇ <a href="#" class="folder-link" data-path="${newPath}">${file.name}</a></span>
                               <button class="delete-path-button" data-path="${newPath}">Delete</button>
                           </div>`;
                        }).join('')}
                        ${files.map(file => {
                            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å
                            const filePath = path ? `${path}/${file.name}` : file.name;
                            return `
                            <div class="file-item">
                                <span class="file-name">üìÑ ${file.name}</span>
                                <div class="buttons-file">
                                    <button class="download-button" data-path="${filePath}">Download</button>
                                    <button class="delete-button" data-path="${filePath}">Delete</button>
                                </div>
                            </div>`;
                        }).join('')}

                    </div>`;

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Back"
                const backButton = document.getElementById("back-button");
                if (backButton) {
                    backButton.addEventListener("click", () => {
                        const parentPath = currentPath.substring(0, currentPath.lastIndexOf('/'));
                        const newPath = parentPath || ''; // –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–Ω—é, –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ
                        fetchFiles(newPath); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
                    });
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –ø–∞–ø–∫–∞–º
                const folderLinks = document.querySelectorAll(".folder-link");
                folderLinks.forEach(link => {
                    link.addEventListener("click", (e) => {
                        e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                        const newPath = link.getAttribute("data-path");
                        fetchFiles(newPath); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏
                    });
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                const downloadButtons = document.querySelectorAll(".download-button");
                downloadButtons.forEach(button => {
                    button.addEventListener("click", (e) => {
                        const filePath = button.getAttribute("data-path");
                        downloadFile(filePath);
                    });
                });

                const deleteButtons = document.querySelectorAll(".delete-button");
                deleteButtons.forEach(button => {
                    button.addEventListener("click", (e) => {
                        const filePath = button.getAttribute("data-path");
                        deleteFile(filePath);
                    });
                });

                const deletePathButtons = document.querySelectorAll(".delete-path-button");
                deletePathButtons.forEach(button => {
                    button.addEventListener("click", (e) => {
                        const filePath = button.getAttribute("data-path");
                        deletePath(filePath);
                    });
                });

            } else {
                fileList.innerHTML = `<p>Error: ${data.error}</p>`;
            }
        } catch (error) {
            fileList.innerHTML = `<p>Error: Failed to fetch files. ${error.message}</p>`;
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const downloadFile = async (filePath) => {
        try {
            const response = await fetch(`/download/${encodeURIComponent(filePath)}`);
            if (response.ok) {
                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filePath.split('/').pop(); // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                a.click();
            } else {
                alert("Error downloading the file.");
            }
        } catch (error) {
            alert("Error: " + error.message);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const deleteFile = async (filePath) => {
        const confirmDelete = confirm("Are you sure you want to delete this file?");
        if (confirmDelete) {
            try {
                const response = await fetch(`/delete/${encodeURIComponent(filePath)}`, { method: 'GET' });
                if (response.ok) {
                    alert("File deleted successfully!");
                    fetchFiles(currentPath); // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                } else {
                    alert("Error deleting the file.");
                }
            } catch (error) {
                alert("Error: " + error.message);
            }
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const deletePath = async (filePath) => {
        const confirmDelete = confirm("Are you sure you want to delete this directory?");
        if (confirmDelete) {
            try {
                const response = await fetch(`/deletePath/${encodeURIComponent(filePath)}`, { method: 'GET' });
                if (response.ok) {
                    alert("File deleted successfully!");
                    fetchFiles(currentPath); // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                } else {
                    alert("Error deleting the directory.");
                }
            } catch (error) {
                alert("Error: " + error.message);
            }
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
uploadForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    const fileInput = document.getElementById("file-input");
    const formData = new FormData();
    formData.append("file", fileInput.files[0]);
    formData.append("path", currentPath);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    if (!fileInput.files[0]) {
        alert("Please select a file to upload.");
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    const inputFileContainer = fileInput.closest('.input-file');
    const statusText = inputFileContainer.querySelector('.input-file-text');
    statusText.textContent = "Uploading...";

    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch("/upload", {
            method: "POST",
            body: formData,
        });

        if (response.ok) {
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            statusText.textContent = "File uploaded successfully!";
            fetchFiles(currentPath);  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        } else {
            statusText.textContent = "Error uploading file.";
        }
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        console.error("Upload failed:", error);
        statusText.textContent = "Error uploading file.";
    }
});

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    createFolderForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        const fileInput = document.getElementById("name-input");
        const formData = new FormData();
        formData.append("folder-name", fileInput.value); // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏–Ω–ø—É—Ç–∞
        formData.append("path", currentPath); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å

        if (!fileInput.value) {
            alert("Please enter a folder name.");
            return;
        }

        const response = await fetch("/createPath", {
            method: "POST",
            body: formData,
        });

        if (response.ok) {
            alert("Folder created successfully!");
            document.getElementById("name-input").value = "";
            fetchFiles(currentPath);  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        } else {
            alert("Error creating folder");
        }
    });

    // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥
    fetchFiles();
});


$('.input-file input[type=file]').on('change', function(){
	let file = this.files[0];
	$(this).closest('.input-file').find('.input-file-text').html(file.name);
});